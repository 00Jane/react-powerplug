(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{"./docs/components/Set.mdx":function(e,a,n){"use strict";n.r(a);var t=n("./node_modules/react/index.js"),r=n.n(t),o=n("./node_modules/@mdx-js/tag/dist/index.js"),s=n("./docs/_ui/PropsTable.js");n("./dist/react-powerplug.esm.js");function m(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}a.default=function(e){var a=e.components;m(e,["components"]);return r.a.createElement(o.MDXTag,{name:"wrapper",components:a},r.a.createElement(o.MDXTag,{name:"h1",components:a,props:{id:"set"}},"Set"),r.a.createElement(o.MDXTag,{name:"p",components:a},"The Set component is used to work with an array of ",r.a.createElement(o.MDXTag,{name:"strong",components:a,parentName:"p"},"unique")," values."),r.a.createElement(o.MDXTag,{name:"h2",components:a,props:{id:"usage"}},"Usage"),r.a.createElement(o.MDXTag,{name:"pre",components:a},r.a.createElement(o.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-js",metaString:""}},"import { Set } from 'react-powerplug'\n")),r.a.createElement(o.MDXTag,{name:"pre",components:a},r.a.createElement(o.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-jsx",metaString:""}},"<Set initial={['react', 'babel']}>\n  {({ values, remove, add }) => (\n    <TagManager>\n      <FormInput onSubmit={add} />\n      {values.map(tag => (\n        <Tag onRemove={() => remove(tag)}>{tag}</Tag>\n      ))}\n    </TagManager>\n  )}\n</Set>\n")),r.a.createElement(o.MDXTag,{name:"h2",components:a,props:{id:"props"}},"Props"),r.a.createElement(s.d,null,r.a.createElement(s.c,{name:"initial",type:"array",default:[]},"Specifies the initial `values` state."),r.a.createElement(s.c,{name:"onChange",type:"function"},"The onChange event of the Set is called whenever the `values` state changes."),r.a.createElement(s.c,{name:"children",type:"function"},"Receive state as function. It can also be `render` prop.")),r.a.createElement(o.MDXTag,{name:"h2",components:a,props:{id:"children-props"}},"Children Props"),r.a.createElement(s.b,null,r.a.createElement(s.a,{name:"values",type:"array"},"Your `values` state value"),r.a.createElement(s.a,{name:"add",type:"function"},"Add a unique `value` to your values array.",r.a.createElement("br",null),"Does nothing if values array already includes a `value`."),r.a.createElement(s.a,{name:"remove",type:"function"},"Remove a `value` from your `values` array"),r.a.createElement(s.a,{name:"has",type:"function"},"True if `values` array includes a `value`"),r.a.createElement(s.a,{name:"clear",type:"function"},"Set `values` state to an empty array"),r.a.createElement(s.a,{name:"reset",type:"function"},"Reset `values` to initial state")))}}}]);
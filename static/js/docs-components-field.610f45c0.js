(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{"./docs/components/Field.mdx":function(e,n,a){"use strict";a.r(n);var t=a("./node_modules/react/index.js"),r=a.n(t),o=a("./node_modules/@mdx-js/tag/dist/index.js"),l=a("./docs/_ui/PropsTable.js");a("./dist/react-powerplug.esm.js");function s(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}n.default=function(e){var n=e.components;s(e,["components"]);return r.a.createElement(o.MDXTag,{name:"wrapper",components:n},r.a.createElement(o.MDXTag,{name:"h1",components:n,props:{id:"field"}},"Field"),r.a.createElement(o.MDXTag,{name:"p",components:n},"The Field component is used for form fields like inputs, checkboxes, selects, etc."),r.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"usage"}},"Usage"),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js",metaString:""}},"import { Field } from 'react-powerplug'\n")),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-jsx",metaString:""}},"<Field>\n  {({ value, set }) => (\n    <ControlledField value={value} onChange={e => set(e.target.value)} />\n  )}\n</Field>\n")),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-jsx",metaString:""}},'<Field initial="hello world">\n  {({ bind }) => <ControlledField {...bind} />}\n</Field>\n')),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-jsx",metaString:""}},'<Field initial={true}>\n  {({ bind }) => (\n    <label>\n      You accept the terms? <input type="checkbox" {...bind} />\n    </label>\n  )}\n</Field>\n')),r.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"props"}},"Props"),r.a.createElement(l.d,null,r.a.createElement(l.c,{name:"initial",type:"any"},"Specifies the initial `value` state."),r.a.createElement(l.c,{name:"onChange",type:"function"},"The onChange event of the Value is called whenever the on state changes."),r.a.createElement(l.c,{name:"children",type:"function"},"Receive state as function. It can also be `render` prop.")),r.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"children-props"}},"Children Props"),r.a.createElement(l.b,null,r.a.createElement(l.a,{name:"value",type:"any"},"Your `value` state value"),r.a.createElement(l.a,{name:"set",type:"function"},"Arbitrary set a value to `value` state"),r.a.createElement(l.a,{name:"bind",type:"object"},"There are the bind event functions.",r.a.createElement("br",null),"Contains `value` prop and `onChange` event listener."),r.a.createElement(l.a,{name:"reset",type:"function"},"Reset `value` to initial state")))}}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{"./docs/utils/composeEvents.mdx":function(e,n,o){"use strict";o.r(n);var t=o("./node_modules/react/index.js"),s=o.n(t),a=o("./node_modules/@mdx-js/tag/dist/index.js");function r(e,n){if(null==e)return{};var o,t,s=function(e,n){if(null==e)return{};var o,t,s={},a=Object.keys(e);for(t=0;t<a.length;t++)o=a[t],n.indexOf(o)>=0||(s[o]=e[o]);return s}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)o=a[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(s[o]=e[o])}return s}n.default=function(e){var n=e.components;r(e,["components"]);return s.a.createElement(a.MDXTag,{name:"wrapper",components:n},s.a.createElement(a.MDXTag,{name:"h1",components:n,props:{id:"composeevents"}},"composeEvents"),s.a.createElement(a.MDXTag,{name:"p",components:n},"The composeEvents utility helps you when you need to pass the same callback more than once."),s.a.createElement(a.MDXTag,{name:"pre",components:n},s.a.createElement(a.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-jsx",metaString:""}},"import { Hover, composeEvents } from 'react-powerplug'\n\nconst HoveredDiv = ({ children, onMouseEnter, onMouseLeave, ...restProps }) => (\n  <Hover>\n    {({ hovered, bind }) => (\n      <div\n        {...composeEvents({ onMouseEnter, onMouseLeave }, bind)}\n        {...restProps}\n        children={children(hovered)}\n      />\n    )}\n  </Hover>\n)\n")),s.a.createElement(a.MDXTag,{name:"p",components:n},"It's just merge array of events object into single one."),s.a.createElement(a.MDXTag,{name:"pre",components:n},s.a.createElement(a.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-jsx",metaString:""}},"const callbacks = composeEvents(\n  {\n    onMouseEnter: event => console.log('first call', event),\n    onMouseLeave: event => console.log('first call', event),\n  },\n  {\n    onMouseEnter: event => console.log('second call', event),\n  }\n)\n\n/**\n * callbacks = {\n *   onMouseEnter: Function,\n *   onMouseLeave: Function\n * }\n */\n\n<div {...callbacks} />\n\n<div onMouseEnter={callbacks.onMouseEnter} />\n")))}}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{"./docs/components/Active.mdx":function(e,n,t){"use strict";t.r(n);var a=t("./node_modules/react/index.js"),o=t.n(a),r=t("./node_modules/@mdx-js/tag/dist/index.js"),c=t("./docs/_ui/PropsTable.js");t("./dist/react-powerplug.esm.js");function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}n.default=function(e){var n=e.components;s(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",components:n},o.a.createElement(r.MDXTag,{name:"h1",components:n,props:{id:"active"}},"Active"),o.a.createElement(r.MDXTag,{name:"p",components:n},"The Active component is used to known when user is clicking (holding) some element.",o.a.createElement(r.MDXTag,{name:"br",components:n,parentName:"p"}),"It's the same as ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},":active")," pseudo selector from css."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js",metaString:""}},"import { Active } from 'react-powerplug'\n")),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-jsx",metaString:""}},"<Active>\n  {({ active, bind }) => (\n    <div {...bind}>\n      You are {active ? 'clicking' : 'not clicking'} this div.\n    </div>\n  )}\n</Active>\n")),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"props"}},"Props"),o.a.createElement(c.d,null,o.a.createElement(c.c,{name:"onChange",type:"function"},"The onChange event of the Active is called whenever the `active` state changes."),o.a.createElement(c.c,{name:"children",type:"function"},"Receive state as function. It can also be `render` prop.")),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"children-props"}},"Children Props"),o.a.createElement(c.b,null,o.a.createElement(c.a,{name:"active",type:"boolean"},"True if is holding the binded element"),o.a.createElement(c.a,{name:"bind",type:"object"},"There are the bind event functions.",o.a.createElement("br",null),"Contains `onMouseUp` and `onMouseDown` event listeners.")))}}}]);
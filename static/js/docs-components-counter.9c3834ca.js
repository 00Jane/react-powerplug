(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{"./docs/components/Counter.mdx":function(e,n,t){"use strict";t.r(n);var a=t("./node_modules/react/index.js"),o=t.n(a),r=t("./node_modules/@mdx-js/tag/dist/index.js"),c=t("./docs/_ui/PropsTable.js");t("./dist/react-powerplug.esm.js");function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}n.default=function(e){var n=e.components;s(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",components:n},o.a.createElement(r.MDXTag,{name:"h1",components:n,props:{id:"counter"}},"Counter"),o.a.createElement(r.MDXTag,{name:"p",components:n},"The Counter component is used for when it's necessary to count something.  "),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"usage"}},"Usage"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js",metaString:""}},"import { Counter } from 'react-powerplug'\n")),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-jsx",metaString:""}},'<Counter initial={0}>\n  {({ count, inc, dec }) => (\n    <CartItem\n      productName="Lorem ipsum"\n      unitPrice={19.9}\n      count={count}\n      onAdd={inc}\n      onRemove={dec}\n    />\n  )}\n</Counter>\n')),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"props"}},"Props"),o.a.createElement(c.d,null,o.a.createElement(c.c,{name:"initial",type:"number",default:0},"Specifies the initial `count` state."),o.a.createElement(c.c,{name:"onChange",type:"function"},"The onChange event of the Toggle is called whenever the on state changes."),o.a.createElement(c.c,{name:"children",type:"function"},"Receive state as function. It can also be `render` prop.")),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"children-props"}},"Children Props"),o.a.createElement(c.b,null,o.a.createElement(c.a,{name:"count",type:"number"},"Your `count` state value"),o.a.createElement(c.a,{name:"inc",type:"function"},"Increase your count state by 1."),o.a.createElement(c.a,{name:"dec",type:"function"},"Decrease your count state by 1."),o.a.createElement(c.a,{name:"incBy",type:"function"},"Arbitrary increase your count state by provided value."),o.a.createElement(c.a,{name:"decBy",type:"function"},"Arbitrary decrease your count state by provided value."),o.a.createElement(c.a,{name:"set",type:"function"},"Arbitrary set a value to `count` state"),o.a.createElement(c.a,{name:"reset",type:"function"},"Reset `count` to initial state")))}}}]);